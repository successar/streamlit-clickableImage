{"version":3,"sources":["ClickableImage.tsx","index.tsx"],"names":["ClickableImage","props","extra","render","shapeRendering","viewBox","args","width","height","xmlns","href","src","x","y","render_row_left_beams","render_col_top_beams","render_row_right_beams","render_col_bottom_beams","marked","state","type","index","row_left_beams","map","beam","Fragment","fill","opacity","onClick","e","handler","col_top_beams","row_right_beams","col_bottom_beams","this","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4ca5e7b.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\n\ninterface State {\n    type: string,\n    index: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ClickableImage extends StreamlitComponentBase<State> {\n    extra: number = 6;\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    public render = (): ReactNode => {\n        return (\n            <svg shapeRendering=\"optimizeSpeed\"\n                viewBox={`0 0 ${this.props.args.width + 2 * this.extra + 1} ${this.props.args.height + 2 * this.extra + 1}`}\n                xmlns=\"http://www.w3.org/2000/svg\">\n                <image href={this.props.args.src} width={this.props.args.width} height={this.props.args.height} x={this.extra} y={this.extra} />\n                {this.render_row_left_beams()}\n                {this.render_col_top_beams()}\n                {this.render_row_right_beams()}\n                {this.render_col_bottom_beams()}\n            </svg>\n        )\n    }\n\n    public render_row_left_beams = () => {\n        let marked = (this.state && this.state.type == \"row_left\") ? this.state.index : null;\n        return this.props.args.row_left_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"blue\" opacity=\"0.25\" />\n                    <rect x={0} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill={index == marked ? \"black\" : \"blue\"} opacity=\"1.0\"\n                        onClick={e => this.handler(\"row_left\", index)} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_top_beams = () => {\n        let marked = (this.state && this.state.type == \"col_top\") ? this.state.index : null;\n        return this.props.args.col_top_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"red\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={0} height={this.extra}\n                        width={beam[1] - beam[0]} fill={index == marked ? \"black\" : \"red\"} opacity=\"1.0\"\n                        onClick={e => this.handler(\"col_top\", index)} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_row_right_beams = () => {\n        let marked = (this.state && this.state.type == \"row_right\") ? this.state.index : null;\n        return this.props.args.row_right_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"aqua\" opacity=\"0.25\" />\n                    <rect x={this.extra + this.props.args.width} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill={index == marked ? \"black\" : \"aqua\"} opacity=\"1.0\"\n                        onClick={e => this.handler(\"row_right\", index)} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_bottom_beams = () => {\n        let marked = (this.state && this.state.type == \"col_bottom\") ? this.state.index : null;\n        return this.props.args.col_bottom_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"orchid\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={this.extra + this.props.args.height} height={this.extra + 1}\n                        width={beam[1] - beam[0]} fill={index == marked ? \"black\" : \"orchid\"} opacity=\"1.0\"\n                        onClick={e => this.handler(\"col_bottom\", index)} />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public handler(type: string, index: number) {\n        this.setState(\n            prevState => ({ \"type\": type, \"index\": index }),\n            () => Streamlit.setComponentValue([type, index])\n        );\n    }\n}\n\nexport default withStreamlitConnection(ClickableImage)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ClickableImage from \"./ClickableImage\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClickableImage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}