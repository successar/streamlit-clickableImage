{"version":3,"sources":["ClickableImage.tsx","index.tsx"],"names":["ClickableImage","props","extra","svg","render","Grid","container","spacing","item","xs","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","onChange","e","value","setState","args","interactive","ToggleButtonGroup","state","type","exclusive","start","end","aria-label","style","margin","size","ToggleButton","shapeRendering","viewBox","width","height","xmlns","ref","onClick","handler","undefined","href","src","x","y","render_row_left_beams","render_col_top_beams","render_row_right_beams","render_col_bottom_beams","render_extra","render_clicked","row_extra","extra_row","map","beam","length","x1","y1","x2","y2","stroke","fill","opacity","col_extra","extra_col","concat","row_left_beams","index","Fragment","col_top_beams","row_right_beams","col_bottom_beams","React","createRef","event","preventDefault","point","this","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","prevState","coordinateOfInterest","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a15fe133.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport { Slider, Grid } from \"@material-ui/core\";\n\n\ninterface State {\n    type: string,\n    start: number | null,\n    end: number | null,\n    width: number | number[]\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ClickableImage extends StreamlitComponentBase<State> {\n    extra: number = 6;\n    private svg: any;\n\n    constructor(props: any) {\n        super(props);\n        this.svg = React.createRef();\n        this.state = { start: null, end: null, type: \"row\", width: 100 }\n    }\n\n    public render = (): ReactNode => {\n        return (\n            <div>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <Slider\n                            defaultValue={100}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"off\"\n                            step={10}\n                            min={30}\n                            max={100}\n                            onChange={(e, value) => this.setState({\"width\" : value})}\n                        />\n                    </Grid>\n                    {\n                        this.props.args.interactive && <Grid item xs={3}> \n                            <ToggleButtonGroup\n                                value={this.state.type}\n                                exclusive\n                                onChange={(e, value) => this.setState(() => ({ type: value, start: null, end: null }))}\n                                aria-label=\"selection type\"\n                                style={{ margin: 2 }}\n                                size=\"small\"\n                            >\n                                <ToggleButton value=\"row\" aria-label=\"row\">Row</ToggleButton>\n                                <ToggleButton value=\"col\" aria-label=\"col\">Col</ToggleButton>\n                            </ToggleButtonGroup> \n                        </Grid>\n                    }\n                    \n                </Grid>\n                <br />\n                <svg shapeRendering=\"optimizeSpeed\"\n                    viewBox={`0 0 ${this.props.args.width + 2 * this.extra + 1} ${this.props.args.height + 2 * this.extra + 1}`}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    ref={(svg) => this.svg = svg}\n                    onClick={this.props.args.interactive ? (e => this.handler(e)) : undefined} \n                    width={`${this.state.width}%`}>\n                    <image href={this.props.args.src} width={this.props.args.width} height={this.props.args.height} x={this.extra} y={this.extra} />\n                    {this.render_row_left_beams()}\n                    {this.render_col_top_beams()}\n                    {this.render_row_right_beams()}\n                    {this.render_col_bottom_beams()}\n                    {this.render_extra()}\n                    {this.props.args.interactive && this.render_clicked()}\n                </svg>\n            </div>\n        )\n    }\n\n    public render_extra = () => {\n        let row_extra = (this.props.args.extra_row !== undefined) ? this.props.args.extra_row.map((beam: number[]) => {\n            if (beam.length == 1) {\n                return <line x1={this.extra} y1={this.extra + beam[0]} x2={this.extra + this.props.args.width}\n                    y2={this.extra + beam[0]} stroke=\"black\" />\n            }\n            else {\n                return <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                    height={beam[1] - beam[0]} fill=\"black\" opacity=\"0.95\" />\n            }\n        }) : [];\n\n        let col_extra = (this.props.args.extra_col !== undefined) ? this.props.args.extra_col.map((beam: number[]) => {\n            if (beam.length == 1) {\n                return <line x1={this.extra + beam[0]} y1={this.extra} y2={this.extra + this.props.args.height}\n                    x2={this.extra + beam[0]} stroke=\"black\" />\n            }\n            else {\n                return <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                    width={beam[1] - beam[0]} fill=\"black\" opacity=\"0.95\" />\n            }\n        }) : [];\n\n        return row_extra.concat(col_extra)\n    }\n\n\n    public render_row_left_beams = () => {\n        return this.props.args.row_left_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"blue\" opacity=\"0.25\" />\n                    <rect x={0} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill=\"blue\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_top_beams = () => {\n        return this.props.args.col_top_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"red\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={0} height={this.extra}\n                        width={beam[1] - beam[0]} fill=\"red\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_row_right_beams = () => {\n        return this.props.args.row_right_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"aqua\" opacity=\"0.25\" />\n                    <rect x={this.extra + this.props.args.width} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill=\"aqua\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_bottom_beams = () => {\n        return this.props.args.col_bottom_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"orchid\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={this.extra + this.props.args.height} height={this.extra + 1}\n                        width={beam[1] - beam[0]} fill=\"orchid\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_clicked = () => {\n        if (this.state.start != null && this.state.end != null) {\n            if (this.state.type == \"row\") {\n                return (\n                    <rect x={this.extra} y={this.extra + this.state.start} width={this.props.args.width}\n                        height={this.state.end - this.state.start} fill=\"black\" opacity=\"1.0\" />\n                )\n            }\n            else {\n                return (\n                    <rect x={this.extra + this.state.start} y={this.extra} height={this.props.args.height}\n                        width={this.state.end - this.state.start} fill=\"black\" opacity=\"1.0\" />\n                )\n            }\n        }\n        else if (this.state.start != null) {\n            if (this.state.type == \"row\") {\n                return (\n                    <line x1={this.extra} y1={this.extra + this.state.start} x2={this.extra + this.props.args.width}\n                        y2={this.extra + this.state.start} stroke=\"black\" />\n                )\n            }\n            else {\n                return (\n                    <line x1={this.extra + this.state.start} y1={this.extra} y2={this.extra + this.props.args.height}\n                        x2={this.extra + this.state.start} stroke=\"black\" />\n                )\n            }\n        }\n    }\n\n    public handler(event: any) {\n        event.preventDefault();\n        let point = this.svg.createSVGPoint();\n        point.x = event.clientX;\n        point.y = event.clientY;\n        point = point.matrixTransform(this.svg.getScreenCTM().inverse());\n        point.x = point.x - this.extra;\n        point.y = point.y - this.extra;\n\n\n        this.setState(\n            function (prevState) {\n                let coordinateOfInterest = ((prevState.type == \"row\") ? point.y : point.x);\n                if (prevState.start === null || prevState.end != null) {\n                    return { \"start\": coordinateOfInterest, end: null, type: prevState.type };\n                }\n                else {\n                    return { \"start\": prevState.start, end: coordinateOfInterest, type: prevState.type };\n                }\n            },\n            () => {\n                if (this.state.start != null && this.state.end != null && this.state.start < this.state.end) {\n                    Streamlit.setComponentValue(this.state)\n                }\n            }\n        );\n    }\n}\n\nexport default withStreamlitConnection(ClickableImage)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ClickableImage from \"./ClickableImage\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClickableImage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}