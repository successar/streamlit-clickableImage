{"version":3,"sources":["ClickableImage.tsx","index.tsx"],"names":["ClickableImage","props","extra","svg","render","ToggleButtonGroup","value","state","type","exclusive","onChange","e","setState","start","end","aria-label","style","margin","size","ToggleButton","shapeRendering","viewBox","args","width","height","xmlns","ref","onClick","handler","href","src","x","y","render_row_left_beams","render_col_top_beams","render_row_right_beams","render_col_bottom_beams","render_clicked","row_left_beams","map","beam","index","Fragment","fill","opacity","col_top_beams","row_right_beams","col_bottom_beams","x1","y1","x2","y2","stroke","React","createRef","event","preventDefault","point","this","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","prevState","coordinateOfInterest","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6edfb5d.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\n\n\ninterface State {\n    type: string,\n    start: number | null,\n    end: number | null\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ClickableImage extends StreamlitComponentBase<State> {\n    extra: number = 6;\n    private svg: any;\n\n    constructor(props: any) {\n        super(props);\n        this.svg = React.createRef();\n        this.state = { start: null, end: null, type: \"row\" }\n    }\n\n    public render = (): ReactNode => {\n        return (\n            <div>\n                <ToggleButtonGroup\n                    value={this.state.type}\n                    exclusive\n                    onChange={(e, value) => this.setState(() => ({ type: value, start: null, end: null }))}\n                    aria-label=\"selection type\"\n                    style={{margin: 2 }}\n                    size=\"small\"\n                >\n                    <ToggleButton value=\"row\" aria-label=\"row\">Row</ToggleButton>\n                    <ToggleButton value=\"col\" aria-label=\"col\">Col</ToggleButton>\n                </ToggleButtonGroup>\n                <br/>\n                <svg shapeRendering=\"optimizeSpeed\"\n                    viewBox={`0 0 ${this.props.args.width + 2 * this.extra + 1} ${this.props.args.height + 2 * this.extra + 1}`}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    ref={(svg) => this.svg = svg}\n                    onClick={e => this.handler(e)} >\n                    <image href={this.props.args.src} width={this.props.args.width} height={this.props.args.height} x={this.extra} y={this.extra} />\n                    {this.render_row_left_beams()}\n                    {this.render_col_top_beams()}\n                    {this.render_row_right_beams()}\n                    {this.render_col_bottom_beams()}\n                    {this.render_clicked()}\n                </svg>\n            </div>\n        )\n    }\n\n\n    public render_row_left_beams = () => {\n        return this.props.args.row_left_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"blue\" opacity=\"0.25\" />\n                    <rect x={0} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill=\"blue\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_top_beams = () => {\n        return this.props.args.col_top_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"red\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={0} height={this.extra}\n                        width={beam[1] - beam[0]} fill=\"red\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_row_right_beams = () => {\n        return this.props.args.row_right_beams.map((beam: number[], index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra} y={this.extra + beam[0]} width={this.props.args.width}\n                        height={beam[1] - beam[0]} fill=\"aqua\" opacity=\"0.25\" />\n                    <rect x={this.extra + this.props.args.width} y={this.extra + beam[0]} width={this.extra}\n                        height={beam[1] - beam[0]} fill=\"aqua\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_col_bottom_beams = () => {\n        return this.props.args.col_bottom_beams.map((beam: any, index: number) => {\n            return (\n                <React.Fragment>\n                    <rect x={this.extra + beam[0]} y={this.extra} height={this.props.args.height}\n                        width={beam[1] - beam[0]} fill=\"orchid\" opacity=\"0.25\" />\n                    <rect x={this.extra + beam[0]} y={this.extra + this.props.args.height} height={this.extra + 1}\n                        width={beam[1] - beam[0]} fill=\"orchid\" opacity=\"1.0\" />\n                </React.Fragment>\n            )\n        })\n    }\n\n    public render_clicked = () => {\n        if (this.state.start != null && this.state.end != null) {\n            if (this.state.type == \"row\") {\n                return (\n                    <rect x={this.extra} y={this.extra + this.state.start} width={this.props.args.width}\n                        height={this.state.end - this.state.start} fill=\"black\" opacity=\"1.0\" />\n                )\n            }\n            else {\n                return (\n                    <rect x={this.extra + this.state.start} y={this.extra} height={this.props.args.height}\n                        width={this.state.end - this.state.start} fill=\"black\" opacity=\"1.0\" />\n                )\n            }\n        }\n        else if (this.state.start != null) {\n            if (this.state.type == \"row\") {\n                return (\n                    <line x1={this.extra} y1={this.extra + this.state.start} x2={this.extra + this.props.args.width}\n                        y2={this.extra + this.state.start} stroke=\"black\" />\n                )\n            }\n            else {\n                return (\n                    <line x1={this.extra + this.state.start} y1={this.extra} y2={this.extra + this.props.args.height}\n                        x2={this.extra + this.state.start} stroke=\"black\" />\n                )\n            }\n        }\n    }\n\n    public handler(event: any) {\n        event.preventDefault();\n        let point = this.svg.createSVGPoint();\n        point.x = event.clientX;\n        point.y = event.clientY;\n        point = point.matrixTransform(this.svg.getScreenCTM().inverse());\n        point.x = point.x - this.extra;\n        point.y = point.y - this.extra;\n\n\n        this.setState(\n            function (prevState) {\n                let coordinateOfInterest = ((prevState.type == \"row\") ? point.y : point.x);\n                if (prevState.start === null || prevState.end != null) {\n                    return { \"start\": coordinateOfInterest, end: null, type: prevState.type };\n                }\n                else {\n                    return { \"start\": prevState.start, end: coordinateOfInterest, type: prevState.type };\n                }\n            },\n            () => {\n                if (this.state.start != null && this.state.end != null && this.state.start < this.state.end) {\n                    Streamlit.setComponentValue(this.state)\n                }\n            }\n        );\n    }\n}\n\nexport default withStreamlitConnection(ClickableImage)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ClickableImage from \"./ClickableImage\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClickableImage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}